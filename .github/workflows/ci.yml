# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    permissions:
      actions: read
      contents: write
      checks: write
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: Run ESLint
        continue-on-error: true
        run: |
          yarn lint --max-warnings=0 --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

  test:
    runs-on: ubuntu-latest
    name: Run tests
    permissions:
      actions: read
      contents: write
      checks: write
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: Run tests
        run: yarn test:ci

#  typecheck:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '22.x'
#          cache: 'yarn'
#          cache-dependency-path: 'yarn.lock'
#
#      - name: Install dependencies
#        run: yarn install --frozen-lockfile --non-interactive
#
#      - name: Run type checks
#        run: yarn typecheck

  push_to_registry:
    needs:
      - lint
      - test
    strategy:
      matrix:
        dockerfile: [Frontend.Dockerfile, Playwright.Dockerfile]
        architecture: [linux/amd64, linux/arm64]
      fail-fast: false
    name: Build ${{ matrix.dockerfile }} (${{ matrix.architecture }})
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.architecture }}

      - name: Get Dockerfile Name
        id: dockerfile
        run: |
          name=$(echo ${{ matrix.dockerfile }} | cut -d'.' -f1)
          name=$(echo $name | tr '[:upper:]' '[:lower:]')
          echo "Name: $name"
          image_name="commanderred42/webstore-$name"
          echo "Image Name: $image_name"
          echo "image_name=$image_name" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=true
          images: ${{ env.image_name }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.architecture }}
